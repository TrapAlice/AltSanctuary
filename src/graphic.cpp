#include "graphic.h"
#include <functional>

#define LOAD_GRAPHIC(graphic) graphics[(int)Graphic::graphic] = std::bind(&graphic)

std::function<std::string()> graphics[(int)Graphic::num_graphics];

std::string BARBARIAN_M(){
	return R"R(                                  
                                  dMMm...
                                 dMMPdppp`---.
                                ,|- - pppdd  ;`.
                              ,` |    |ddp  |  |
                             (``. `.__,'dP |   |
                             |   `   ..dP  ;_  |
                             |    |  88P  /  `.;
                             :_.-~| 8P'` /    /
                              `._ ``____.;   7`.
                   ,,__       ,>   `._  /', /   `._
                   `._ `,~~~~-----,,,|`|;' ;     ,'.
                      `-~~'---'-~~~''.__[|;' _.-'   `)R";
}

std::string BARBARIAN_F(){
	return R"R(
                           :|           . ,
                           :|           _)/'/
                           :|         ,/'/,'<,
                           :|       .-'\\_.-`
                           :|      ///'\\
                           .|      |- -||
                          (/\      `.-,'._    .
                          `: |   _.-|   | '\.' `.
                           :|/`.'  / \ /'_.'     \
                           :|\   .-\__|__<    \/  |
                           :| `-'   \  ,  \   /\  |
                           :|        \._.=-\.     /)R";
}

std::string PALADIN_M(){
	return R"R(
                                |-|   .||.
                                |.|  :|  |:
                                |.| |  ||  |
                                |.| ||-||-||
                                |.| |..::../
                                |.|,' '||'/.
                             ,-'|.|.`.----,'`.
                           ,' .`|.| `.----,;/ |
                          ,'=-.`|.|| .   | |,'|
                         /-   :)|.|.`.---:,:,'|.
                        (  `-:;||.|.`.)  |.`-':,|
                        /.   /  ;.:--'   |    | ,`.)R";
}

std::string PALADIN_F(){
	return R"R(
                                       ___
                                      / | \
                                     |.-=-.|
                                     )\_|_/(
                                  .=='\   /`==.
                                .'\   (`:')   /`.
                              _/_ |_.-' : `-._|__\_
                             <___>'\    :   / `<___>
                             /  /   >=======<  /  /
                           _/ .'   /  ,-:-.  \/=,'
                          / _/    |__/v^v^v\__) \
                          \(\)     |V^V^V^V^V|\_/)R";
}

std::string ASSASSIN_M(){
	return R"R(
                                  .---.
                                .```````.      ,.
                                '`__.__`'     /</
                                |'-.|.-'|    />/
                                .-._^_.-.   /</
                                 `.   ./   />/
                             _.-';`---`-._/_/
                            `  (( | ~ |))  '_)
                           /    ``'`-'//    `
                          /      ``  //      `
                         /   '    ``//     ,  `
                        /   /|      ``     |   `)R";
}

std::string ASSASSIN_F(){
	return R"R(
                                      :::::
                                     :::::::
                                     : - - :
                                      :::::
                                    ___:::___
                                  .' //   \\ `.
                                .' _/ \   / \_ `.
                               /  /(   `-'   )\  \
                              (  <  \ -' `- /  >  )
                               `. \__)     (__/ .'
                                 `.__}     {__.'
                                   /         \
                                   |    |    |)R";
}

std::string WIZARD_M(){
	return R"R(
                                     /`
                                    /  `
                                   |    |
                                _.-|-..-|-._
                               (^ '----' ` _)
                                ^`;-_--_--^
                                  | -; - |
                                 _`. `_,.'_
                               /`  )    (   `
                              /   `(    )`   `
                             /     `)  (`     `
                            /      |(  )|      `)R";
}

std::string WIZARD_F(){
	return R"R(
                                     ____    -^-
                                    /   /)  (( ))
                                   (  c' (   -`-
                                   _) ) _/   ||
                                   \_/ (_    ||
                                   / \`~\\   ||
                                  (,,,)  )) _||
                                   | /''((_/(_]
                                   \ \   `./ ||
                                  ,'\ \_   `.||
                                 /   `._\    \|
                                /,,,      ,,,,\)R";
}

std::string DRUID_M(){
	return R"R(
                  |_            /;              _.._
                  `|~--.._     //'             (+=||||
                   `//////|  ||/;'             /~ (||||
                     ~/////|~|`)'             /;   ))))
                         `~'  |              ((`~/((((|
                         ;'_|'|             /'))   )))))
                        /~/ '' ''     _.  /'/|_ /^|`((( |
                       `|/'       _.-~/--/ (  =(   | ,  |
                               _/~|_)_}___/^|/~`|.__||==|
                              vVvV)        )        |  |
                                          _-=o||__ /'/~ |
                                         /(((((|`|(  |~|/)R";
}

std::string DRUID_F(){
	return R"R(
                          /|          ,/'..;|
                          ||        ..:'./--\
                          | |      /;  '|
                         _'-:      :- -:'
                         \,'[      `-.-`.._
                          '.|_   ,.-' |   '|,--\
                          `./'`-'| | \ /'_,-  . \
                           \| _..=-\_____/    \. \
                           ||'-'    | |  _.    \. |
                           ||        :'':  \.     |
                           ||       ':._|   ''--..|
                           ||       /  |   -|)R";
}

std::string RANGER_M(){
	return R"R(
                                   /                           ||
                 #####           /                             ||
              ###########      /                               ||
             |##==      |    /                                 ||
        ______ =       =|__/___                                ||
    ,--' ,----`-,__ ___/'  --,-`-==============================##==========>
   |               '        ##_______ ______   ______,--,____,=##,__
    `,    __==    ___,-,__,--'#'  ==='      `-'              | ##,-/
      `-,____,---'       |####|              |        ____,--|_##,/
          #_              |##   |  _____,---==,__,---'         ##
           #              ]===--==|                            ||
           #,             ]         |                          ||)R";
}

std::string RANGER_F(){
	return R"R(
                                   ))))))
                                  ))))))))
                                  |- - //))
                                   \__,||)
                                     _||___
                                    /)___/_\
                                   '(_/\_)\/\
                                  />,\\/ / \/\
                                  \o\/==/\  \/o__
                                   (/| /o\\   \\\\
                                   //  \ | \)R";
}

std::string BLANK_FACE(){
	return R"R(                                   
                                   _.------._
                                  :          :
                                 :            :
                                 :            :
                                 :            :
                                 :            :
                                 :            :
                                  :          :
                                   :        :
                                _.:::.____.:::._
                            _.::::::::::::::::::::._
                          .::::::::::::::::::::::::::.)R";
}

std::string DIANE(){
	return R"R(
                                  ,{{}}}}}}.
                                 {{{{{}}}}}}}.
                                {{{{  {{{{{}}}}
                               }}}}} _   _ {{{{{
                               }}}}         }}}}}
                              {{{{C         {{{{{
                             }}}}}}|       /}}}}}}
                            {{{{{{{{;.___.;{{{{{{{{
                            }}}}}}}}})   (}}}}}}}}}}
                           {{{{}}}}}`:   :{{{{{{{{{{
                           {{{}}}}}}  `@` {{{}}}}}}}
                            {{{{{{{{{    }}}}}}}}})R";
}

void GRAPHIC_INIT(){
	LOAD_GRAPHIC(BARBARIAN_M);
	LOAD_GRAPHIC(BARBARIAN_F);
	LOAD_GRAPHIC(PALADIN_M);
	LOAD_GRAPHIC(PALADIN_F);
	LOAD_GRAPHIC(ASSASSIN_M);
	LOAD_GRAPHIC(ASSASSIN_F);
	LOAD_GRAPHIC(WIZARD_M);
	LOAD_GRAPHIC(WIZARD_F);
	LOAD_GRAPHIC(DRUID_M);
	LOAD_GRAPHIC(DRUID_F);
	LOAD_GRAPHIC(RANGER_M);
	LOAD_GRAPHIC(RANGER_F);
	LOAD_GRAPHIC(BLANK_FACE);
	LOAD_GRAPHIC(DIANE);
}

std::string GRAPHIC(Graphic g){
	return graphics[(int)g]();
}